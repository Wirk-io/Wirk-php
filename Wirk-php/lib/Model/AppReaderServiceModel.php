<?php
/**
 * AppReaderServiceModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Wirk
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Wirk\Model;

use \ArrayAccess;
/**
 * AppReaderServiceModel Class Doc Comment
 *
 * @category    Class
 * @description Model for App
 * @package     Wirk
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AppReaderServiceModel implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'app_name' => 'string',
        'has_instruction' => 'bool',
        'has_question_options' => 'bool',
        'id_app' => 'int',
        'qualities' => '\Wirk\Model\QualityReaderServiceModel[]',
        'title_question_options' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'app_name' => 'AppName',
        'has_instruction' => 'HasInstruction',
        'has_question_options' => 'HasQuestionOptions',
        'id_app' => 'IdApp',
        'qualities' => 'Qualities',
        'title_question_options' => 'TitleQuestionOptions'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'app_name' => 'setAppName',
        'has_instruction' => 'setHasInstruction',
        'has_question_options' => 'setHasQuestionOptions',
        'id_app' => 'setIdApp',
        'qualities' => 'setQualities',
        'title_question_options' => 'setTitleQuestionOptions'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'app_name' => 'getAppName',
        'has_instruction' => 'getHasInstruction',
        'has_question_options' => 'getHasQuestionOptions',
        'id_app' => 'getIdApp',
        'qualities' => 'getQualities',
        'title_question_options' => 'getTitleQuestionOptions'
    );
  
    
    /**
      * $app_name 
      * @var string
      */
    protected $app_name;
    
    /**
      * $has_instruction 
      * @var bool
      */
    protected $has_instruction;
    
    /**
      * $has_question_options 
      * @var bool
      */
    protected $has_question_options;
    
    /**
      * $id_app 
      * @var int
      */
    protected $id_app;
    
    /**
      * $qualities 
      * @var \Wirk\Model\QualityReaderServiceModel[]
      */
    protected $qualities;
    
    /**
      * $title_question_options 
      * @var string
      */
    protected $title_question_options;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->app_name = $data["app_name"];
            $this->has_instruction = $data["has_instruction"];
            $this->has_question_options = $data["has_question_options"];
            $this->id_app = $data["id_app"];
            $this->qualities = $data["qualities"];
            $this->title_question_options = $data["title_question_options"];
        }
    }
    
    /**
     * Gets app_name
     * @return string
     */
    public function getAppName()
    {
        return $this->app_name;
    }
  
    /**
     * Sets app_name
     * @param string $app_name 
     * @return $this
     */
    public function setAppName($app_name)
    {
        
        $this->app_name = $app_name;
        return $this;
    }
    
    /**
     * Gets has_instruction
     * @return bool
     */
    public function getHasInstruction()
    {
        return $this->has_instruction;
    }
  
    /**
     * Sets has_instruction
     * @param bool $has_instruction 
     * @return $this
     */
    public function setHasInstruction($has_instruction)
    {
        
        $this->has_instruction = $has_instruction;
        return $this;
    }
    
    /**
     * Gets has_question_options
     * @return bool
     */
    public function getHasQuestionOptions()
    {
        return $this->has_question_options;
    }
  
    /**
     * Sets has_question_options
     * @param bool $has_question_options 
     * @return $this
     */
    public function setHasQuestionOptions($has_question_options)
    {
        
        $this->has_question_options = $has_question_options;
        return $this;
    }
    
    /**
     * Gets id_app
     * @return int
     */
    public function getIdApp()
    {
        return $this->id_app;
    }
  
    /**
     * Sets id_app
     * @param int $id_app 
     * @return $this
     */
    public function setIdApp($id_app)
    {
        
        $this->id_app = $id_app;
        return $this;
    }
    
    /**
     * Gets qualities
     * @return \Wirk\Model\QualityReaderServiceModel[]
     */
    public function getQualities()
    {
        return $this->qualities;
    }
  
    /**
     * Sets qualities
     * @param \Wirk\Model\QualityReaderServiceModel[] $qualities 
     * @return $this
     */
    public function setQualities($qualities)
    {
        
        $this->qualities = $qualities;
        return $this;
    }
    
    /**
     * Gets title_question_options
     * @return string
     */
    public function getTitleQuestionOptions()
    {
        return $this->title_question_options;
    }
  
    /**
     * Sets title_question_options
     * @param string $title_question_options 
     * @return $this
     */
    public function setTitleQuestionOptions($title_question_options)
    {
        
        $this->title_question_options = $title_question_options;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Wirk\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Wirk\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
